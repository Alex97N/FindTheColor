# -*- coding: utf-8 -*-
"""ES_ColorTeller-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fhc3MiVrePtvCebBBmSd2w2GwXdrmeBs
"""

import numpy as np
import PIL
from PIL import Image
import csv
from csv import DictReader

colors_dictionary = [];
max_initial_difference = 2

with open('dataset/colors.csv', 'r') as read_obj:
  dict_reader = DictReader(read_obj)
  colors_dictionary_aux = list(dict_reader)
  colors_dictionary = colors_dictionary_aux

colors_dictionary_size = len(colors_dictionary);

# Open an Image
def open_image(path):
  newImage = Image.open(path)
  return newImage

# Save Image
def save_image(image, path):
  image.save(path, 'png')

# Create a new image with the given size
def create_image(i, j):
  image = Image.new("RGB", (i, j), "white")
  return image

# Get the pixel from the given image
def get_pixel(image, i, j):
    # Inside image bounds?
    width, height = image.size
    if i > height or j > width:
      return None

    # Get Pixel
    pixel = image.getpixel((j, i))
    return pixel

def find_pixel_color_in_csv_increasing_interval(i, j, max_difference, red, green, blue):
  #pixel_color_found = False;
  for k in range(colors_dictionary_size):
         if red >= int(colors_dictionary[k]['red']) - max_difference and red <= int(colors_dictionary[k]['red']) + max_difference and green >= int(colors_dictionary[k]['green']) - max_difference and green <= int(colors_dictionary[k]['green']) + max_difference and blue >= int(colors_dictionary[k]['blue']) - max_difference and blue <= int(colors_dictionary[k]['blue']) + max_difference:
           #print(colors_dictionary[k]['name'])     
           return colors_dictionary[k]['name'] + ' ('+colors_dictionary[k]['red']+','+colors_dictionary[k]['green']+','+colors_dictionary[k]['blue']+')'
           #pixel_color_found = True
           #break
  #if pixel_color_found == False:
  return find_pixel_color_in_csv_increasing_interval(i, j, max_difference + max_initial_difference, red, green, blue)

def find_pixel_color_in_csv_smallest_grade(i, j, red, green, blue):
  color_grades_for_pixel = ['none'] * colors_dictionary_size
  for k in range(colors_dictionary_size):
    color_grades_for_pixel[k] = abs(red - int(colors_dictionary[k]['red'])) + abs(green - int(colors_dictionary[k]['green'])) + abs(blue - int(colors_dictionary[k]['blue']))
  
  smallest_grade_for_pixel = 257;
  color_with_smallest_grade = 'none';
  for k in range(colors_dictionary_size):
    if (color_grades_for_pixel[k] < smallest_grade_for_pixel):
      color_with_smallest_grade = colors_dictionary[k]['name'] + ' ('+colors_dictionary[k]['red']+','+colors_dictionary[k]['green']+','+colors_dictionary[k]['blue']+')'
      smallest_grade_for_pixel = color_grades_for_pixel[k]
    
  #print(color_with_smallest_grade)
  return color_with_smallest_grade

def analyze_color_of_image_pixels(image):
  # Get size
  height = image.height
  width = image.width
  
  for i in range(height):
    for j in range(width):
      # Get Pixel
      pixel = get_pixel(image, i, j)

      # Get R, G, B values (This are int from 0 to 255)
      red =   pixel[0]
      green = pixel[1]
      blue =  pixel[2]

      print("\nPixel", i, j, "with", "red", red, "green", green, "blue", blue, sep=" ")
      print("Increasing interval method:")
      print(find_pixel_color_in_csv_increasing_interval(i, j, max_initial_difference, red, green, blue));
      print("Smallest grade method:")
      print (find_pixel_color_in_csv_smallest_grade(i, j, red, green, blue))

image = open_image("image/image.png")
#image

def writeCSVofImage(iamge):
  with open('imageColors.csv','w', newline='') as csvOut:
    header = ['imageX','imageY','pixel RGB','Increasing Interval M','Smallest Grade M']
    w = csv.DictWriter(csvOut,fieldnames=header)
    w.writeheader();

    height = image.height
    width = image.width

    for i in range(height):
      for j in range(width):
        pixel = get_pixel(image, i, j)

        red =   pixel[0]
        green = pixel[1]
        blue =  pixel[2]

        w.writerow({
            'imageX' : i,
            'imageY' : j,
            'pixel RGB' : '('+str(red)+','+str(green)+','+str(blue)+')',
            'Increasing Interval M' : find_pixel_color_in_csv_increasing_interval(i, j, max_initial_difference, red, green, blue),
            'Smallest Grade M' : find_pixel_color_in_csv_smallest_grade(i, j, red, green, blue)
        })

# analyze_color_of_image_pixels(image)
writeCSVofImage(image)